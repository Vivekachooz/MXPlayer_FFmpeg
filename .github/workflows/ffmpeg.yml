name: Build FFmpeg

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: "Version Name (used as tag)"
        required: true
        type: string
      source_url:
        description: "Source URL for FFmpeg"
        required: true
        type: string
      store_artifact:
        description: "Store Artifacts"
        type: boolean
        default: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.event.inputs.version_name }}
    steps:
      - name: Set Version
        run: |
          echo "version=${{ github.event.inputs.version_name }}" >> "$GITHUB_ENV"
          echo "version=${{ github.event.inputs.version_name }}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        arch: [arm64, neon, x86_64, x86]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Tools
        run: sudo apt update && sudo apt install -y nasm meson ninja-build curl zip

      - name: Set Up NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c

      - name: Set NDK Path
        run: echo "NDK=$ANDROID_NDK_ROOT" >> "$GITHUB_ENV"

      - name: Set Variables
        run: |
          DIR_PWD="$(pwd)"
          OUT_DIR="${DIR_PWD}/output"
          SRC_DIR="${DIR_PWD}/src"
          ROOT_DIR="${SRC_DIR}/jni"
          SRC_FILENAME="ffmpeg-src.tar.gz"
          
          echo "DIR_PWD=$DIR_PWD" >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          echo "SRC_DIR=$SRC_DIR" >> "$GITHUB_ENV"
          echo "ROOT_DIR=$ROOT_DIR" >> "$GITHUB_ENV"
          echo "SRC_FILENAME=$SRC_FILENAME" >> "$GITHUB_ENV"

      - name: Download and Extract Source
        run: |
          mkdir -p "$SRC_DIR"
          curl -#LR -C - "${{ github.event.inputs.source_url }}" -o "${DIR_PWD}/${SRC_FILENAME}"
          tar --strip-components=1 -C "$SRC_DIR" -xzf "${DIR_PWD}/${SRC_FILENAME}"

      - name: Build FFmpeg for ${{ matrix.arch }}
        run: |
          cd "$ROOT_DIR" || exit 1
          sed -i 's/ENABLE_ALL_DEMUXER_DECODER=false/ENABLE_ALL_DEMUXER_DECODER=true/g' config-ffmpeg.sh
          sed -i 's|#!/bin/sh|#!/usr/bin/env bash|g' ffmpeg/configure

          case "${{ matrix.arch }}" in
            arm64) TARGET="${ROOT_DIR}/libs/arm64-v8a";;
            neon) TARGET="${ROOT_DIR}/libs/armeabi-v7a/neon";;
            x86) TARGET="${ROOT_DIR}/libs/x86";;
            x86_64) TARGET="${ROOT_DIR}/libs/x86_64";;
            *) echo "Unknown architecture: ${{ matrix.arch }}" && exit 1 ;;
          esac

          LIB_NAME="${TARGET}/libffmpeg.mx.so"
          TARGET_LIB_NAME="${LIB_NAME}.${{ matrix.arch }}.${{ needs.setup.outputs.version }}"
          TARGET_ARCHIVE_NAME="${OUT_DIR}/mx_${{ matrix.arch }}-${{ needs.setup.outputs.version }}.zip"

          mkdir -p "$TARGET"
          find "$TARGET" -type f \( -name "*.so" -o -name "*.a" \) -not -name "libmx*.so" -exec rm {} +

          echo "Building codec for ${{ matrix.arch }}..."
          
          ./build-libmp3lame.sh "${{ matrix.arch }}"
          ./build-openssl.sh "${{ matrix.arch }}"
          ./build-libsmb2.sh "${{ matrix.arch }}"
          ./build-libdav1d.sh "${{ matrix.arch }}"
          ./build.sh mxutil release build "${{ matrix.arch }}"
          ./build-ffmpeg.sh "${{ matrix.arch }}" | tee build-ffmpeg.log

          if [[ -f "$LIB_NAME" ]]; then
            mv "$LIB_NAME" "$TARGET_LIB_NAME"
          else
            echo "Error: FFmpeg build failed for ${{ matrix.arch }}!"
            exit 1
          fi

          mkdir -p "$OUT_DIR"
          zip -qj9 "$TARGET_ARCHIVE_NAME" "$TARGET_LIB_NAME"
          rm -f "$TARGET_LIB_NAME"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: success() && github.event.inputs.store_artifact == 'true'
        with:
          name: mx_${{ matrix.arch }}
          path: output/*.zip
          if-no-files-found: error

  publishing:
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: mx_*
          merge-multiple: true

      - name: List Artifacts
        run: ls -R artifacts

      - name: Merge Artifacts
        run: |
          mkdir temp
          unzip -q 'artifacts/*.zip' -d temp/
          zip -j artifacts/mx_aio-${{ needs.setup.outputs.version }}.zip temp/*

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version_name }}
          files: artifacts/*.zip
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
